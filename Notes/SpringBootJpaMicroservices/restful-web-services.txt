"All below notes are according to Udemy tutorial : Master Microservices with Spring Boot and Spring Cloud.
Course : Section 3
Corresponding Github Code Repo : Learn-Spring-SpringBoot/Microservices/Learn-restful-webservices/"

Dispatcher Servlet handles all the requests and mappings. It tells the Message Converter (here Jackson) to convert the bean to JSON format for output. It is mapped to [/] on the application so any requests that comes goes through it.

If we return void when creating user via Post, the status returned automatically will be 200OK.
For user creation, we want status code to be 201Created. To do so, we use ServletUriComponentsBuilder and ResponseEntity.

We should always have a common Exception Structure for all kinds of errors.
We create a exception structure and a common handler and then extend to all exceptions accross application using ResponseEntityExceptionHandler.
If we have multiple controller classes, we can share something (like common exception) across all controllers using @ControllerAdvice

handleMethodArgumentNotValid method defined in ResponseEntityExceptionHandler class is fired whenever there is some invalid argument in incoming data.
We can override it to show our own message according to the invalid field.

The Spring HATEOAS project is a library of APIs that we can use to easily create REST representations that follow the principle of HATEOAS (Hypertext as the Engine of Application State).
The principle implies that the API should guide the client through the application by returning relevant information about the next potential steps, along with each response.
The core problem it tries to address is link creation and representation assembly.

Internationalisation - i18n
Customizing services for different users (different countries have different languages)
"Accept Language" can be added in headers when sending a request, so that the server will only send data in that language.

Content Negotiation -
User is asking data in different format
For eg.
To receive data in xml format, we can add jackson dataformat dependency and that is it.
The user can request xml data by sending header key "Accept" as "application/xml" and data will be returned in xml.

We can use springdoc-openapi to generate document for our API. (instead of manually documenting everything)
It uses open-api generated JSON (v3/api-docs) and generates a swagger UI using that JSON.

Actuator -
Provides endpoints where we can manage and monitor our application when in production.
We can use HAL Explorer to explore these endpoints. We can also use HAL to explore the hateoas links that we have provided.

Static Filtering Response -
We define on the Bean itself what fields we want to send back to the user and what fields we dont want to send back by using @JsonIgnore on fields. Everytime that field will be ignored.

If we want for one response to ignore one field and to ignore another field in another response (another url),
then we use:

Dynamic Filtering Response -
We add a little code to add dynamic filtering using MappingJacksonValue and FilterProviders.

Versioning the REST -
Suppose there is a bean PersonV1 with string name as field.
But, later versions we started using PersonV2 with Name name where name has string firstname and lastname.
Some users want the older version and some users want the newer version.

To resolve:
URI versioning opt1 : We can version the api itself. Make separate apis for PersonV1 bean and PersonV2 bean.
v1/person and v2/person.
Request Parameter Versioning opt2 : define a parameter in the request itself
Header Versioning opt3 : define a parameter in the request header itself
ContentNegotiation or Media Type Versioning opt4 : ContentNegotiation, we ask what we want. define "produces" for "Accept" header

Basic Authentication - add using spring security (username and password)

Richardson Maturity Model -
1) expose soap ws in rest style (http://server/getPosts, http://server/deletePosts, etc)
2) lvl 1 + proper resources uri (proper HTTP methods) - (GET http://server/accounts, DELETE http://server/accounts/10)
3) lvl 2 + HATEOAS (hyerpmedia as the state of application engine - next possible actions)
